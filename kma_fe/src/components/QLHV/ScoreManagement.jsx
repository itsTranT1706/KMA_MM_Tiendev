import React, { useState } from "react";
import {
    Button, Dialog, DialogTitle, DialogContent, DialogActions, Table,
    TableBody, TableCell, TableContainer, TableHead, TableRow, Paper,
    Container, Typography, TextField, Box
} from "@mui/material";
import * as XLSX from "xlsx";

const ScoreManagement = () => {
    // D·ªØ li·ªáu gi·∫£ l·∫≠p danh s√°ch sinh vi√™n
    const [students, setStudents] = useState([
        { id: 1, name: "Nguy·ªÖn VƒÉn A", studentId: "SV001", scores: { "To√°n": 8, "L√Ω": 7, "H√≥a": 9 } },
        { id: 2, name: "Tr·∫ßn Th·ªã B", studentId: "SV002", scores: { "To√°n": 6, "L√Ω": 8, "H√≥a": 7 } },
        { id: 3, name: "L√™ VƒÉn C", studentId: "SV003", scores: { "To√°n": 7, "L√Ω": 6, "H√≥a": 8 } },
    ]);

    const [openEditDialog, setOpenEditDialog] = useState(false);
    const [editingStudent, setEditingStudent] = useState(null);

    // M·ªü modal ch·ªânh s·ª≠a sinh vi√™n
    const handleEditStudent = (student) => {
        setEditingStudent({ ...student });
        setOpenEditDialog(true);
    };

    // L∆∞u th√¥ng tin sau khi ch·ªânh s·ª≠a
    const handleSaveEdit = () => {
        setStudents(students.map(s => s.id === editingStudent.id ? editingStudent : s));
        setOpenEditDialog(false);
    };

    // Xu·∫•t ƒëi·ªÉm c·ªßa m·ªôt sinh vi√™n
    const exportStudentScore = (student) => {
        const ws = XLSX.utils.json_to_sheet([
            { "M√¥n h·ªçc": "To√°n", "ƒêi·ªÉm s·ªë": student.scores["To√°n"] },
            { "M√¥n h·ªçc": "L√Ω", "ƒêi·ªÉm s·ªë": student.scores["L√Ω"] },
            { "M√¥n h·ªçc": "H√≥a", "ƒêi·ªÉm s·ªë": student.scores["H√≥a"] },
        ]);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, `ƒêi·ªÉm_${student.name}`);
        XLSX.writeFile(wb, `Diem_${student.name}.xlsx`);
    };

    // Xu·∫•t ƒëi·ªÉm c·ªßa l·ªõp theo m√¥n h·ªçc
    const exportClassScoreBySubject = () => {
        const wsData = students.map(student => ({
            "M√£ SV": student.studentId,
            "T√™n SV": student.name,
            "To√°n": student.scores["To√°n"],
            "L√Ω": student.scores["L√Ω"],
            "H√≥a": student.scores["H√≥a"],
        }));

        const ws = XLSX.utils.json_to_sheet(wsData);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "ƒêi·ªÉm l·ªõp");
        XLSX.writeFile(wb, "Diem_Lop.xlsx");
    };

    return (
        <Container>
            <Typography variant="h5" gutterBottom>üìä Qu·∫£n l√Ω ƒëi·ªÉm s·ªë</Typography>

            <TableContainer component={Paper}>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell>M√£ SV</TableCell>
                            <TableCell>T√™n SV</TableCell>
                            <TableCell>To√°n</TableCell>
                            <TableCell>L√Ω</TableCell>
                            <TableCell>H√≥a</TableCell>
                            <TableCell>Thao t√°c</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {students.map((student) => (
                            <TableRow key={student.id}>
                                <TableCell>{student.studentId}</TableCell>
                                <TableCell>{student.name}</TableCell>
                                <TableCell>{student.scores["To√°n"]}</TableCell>
                                <TableCell>{student.scores["L√Ω"]}</TableCell>
                                <TableCell>{student.scores["H√≥a"]}</TableCell>
                                <TableCell>
                                    <Button size="small" color="primary" onClick={() => handleEditStudent(student)}>
                                        ‚úèÔ∏è S·ª≠a
                                    </Button>
                                    <Button size="small" color="secondary" onClick={() => exportStudentScore(student)}>
                                        üì• Xu·∫•t ƒëi·ªÉm
                                    </Button>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>

            <Box mt={2}>
                <Button variant="contained" color="success" onClick={exportClassScoreBySubject}>
                    üì• Xu·∫•t ƒëi·ªÉm l·ªõp theo m√¥n h·ªçc
                </Button>
            </Box>

            {/* Dialog ch·ªânh s·ª≠a th√¥ng tin sinh vi√™n */}
            <Dialog open={openEditDialog} onClose={() => setOpenEditDialog(false)}>
                <DialogTitle>‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin</DialogTitle>
                <DialogContent>
                    {editingStudent && (
                        <>
                            <TextField
                                fullWidth margin="dense" label="T√™n SV" value={editingStudent.name}
                                onChange={(e) => setEditingStudent({ ...editingStudent, name: e.target.value })}
                            />
                            <TextField
                                fullWidth margin="dense" label="To√°n" type="number" value={editingStudent.scores["To√°n"]}
                                onChange={(e) => setEditingStudent({ ...editingStudent, scores: { ...editingStudent.scores, "To√°n": e.target.value } })}
                            />
                            <TextField
                                fullWidth margin="dense" label="L√Ω" type="number" value={editingStudent.scores["L√Ω"]}
                                onChange={(e) => setEditingStudent({ ...editingStudent, scores: { ...editingStudent.scores, "L√Ω": e.target.value } })}
                            />
                            <TextField
                                fullWidth margin="dense" label="H√≥a" type="number" value={editingStudent.scores["H√≥a"]}
                                onChange={(e) => setEditingStudent({ ...editingStudent, scores: { ...editingStudent.scores, "H√≥a": e.target.value } })}
                            />
                        </>
                    )}
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setOpenEditDialog(false)} color="secondary">H·ªßy</Button>
                    <Button onClick={handleSaveEdit} color="primary">L∆∞u</Button>
                </DialogActions>
            </Dialog>
        </Container>
    );
};

export default ScoreManagement;
